{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30407,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# House Prices Prediction","metadata":{"id":"5v5mm4amQRrm","papermill":{"duration":0.010092,"end_time":"2023-03-07T06:21:39.774967","exception":false,"start_time":"2023-03-07T06:21:39.764875","status":"completed"},"tags":[]}},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_decision_forests as tfdf\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Comment this if the data visualisations doesn't work on your side\n%matplotlib inline","metadata":{"id":"IGmyjJJatzBZ","papermill":{"duration":8.300496,"end_time":"2023-03-07T06:21:48.118668","exception":false,"start_time":"2023-03-07T06:21:39.818172","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:02.375217Z","iopub.execute_input":"2024-10-29T18:58:02.375609Z","iopub.status.idle":"2024-10-29T18:58:06.715196Z","shell.execute_reply.started":"2024-10-29T18:58:02.375570Z","shell.execute_reply":"2024-10-29T18:58:06.713780Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"print(\"TensorFlow v\" + tf.__version__)\nprint(\"TensorFlow Decision Forests v\" + tfdf.__version__)","metadata":{"id":"dh4qwB4iN7Ue","papermill":{"duration":0.019012,"end_time":"2023-03-07T06:21:48.149058","exception":false,"start_time":"2023-03-07T06:21:48.130046","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:06.717068Z","iopub.execute_input":"2024-10-29T18:58:06.717962Z","iopub.status.idle":"2024-10-29T18:58:06.725839Z","shell.execute_reply.started":"2024-10-29T18:58:06.717905Z","shell.execute_reply":"2024-10-29T18:58:06.724327Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"TensorFlow v2.11.0\nTensorFlow Decision Forests v1.2.0\n","output_type":"stream"}]},{"cell_type":"code","source":"train_file_path = \"../input/house-prices-advanced-regression-techniques/train.csv\"\ntrain = pd.read_csv(train_file_path)\nprint(\"Full train dataset shape is {}\".format(train.shape))","metadata":{"id":"JVMPH_IDOBH2","papermill":{"duration":0.066785,"end_time":"2023-03-07T06:21:48.245226","exception":false,"start_time":"2023-03-07T06:21:48.178441","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:06.728197Z","iopub.execute_input":"2024-10-29T18:58:06.728723Z","iopub.status.idle":"2024-10-29T18:58:06.772507Z","shell.execute_reply.started":"2024-10-29T18:58:06.728664Z","shell.execute_reply":"2024-10-29T18:58:06.771097Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Full train dataset shape is (1460, 81)\n","output_type":"stream"}]},{"cell_type":"code","source":"train.head(3)","metadata":{"papermill":{"duration":0.049873,"end_time":"2023-03-07T06:21:48.321938","exception":false,"start_time":"2023-03-07T06:21:48.272065","status":"completed"},"tags":[],"id":"kgbP5R6X416m","execution":{"iopub.status.busy":"2024-10-29T18:58:06.776109Z","iopub.execute_input":"2024-10-29T18:58:06.776550Z","iopub.status.idle":"2024-10-29T18:58:06.810819Z","shell.execute_reply.started":"2024-10-29T18:58:06.776498Z","shell.execute_reply":"2024-10-29T18:58:06.809477Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n\n  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n\n  YrSold  SaleType  SaleCondition  SalePrice  \n0   2008        WD         Normal     208500  \n1   2007        WD         Normal     181500  \n2   2008        WD         Normal     223500  \n\n[3 rows x 81 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows Ã— 81 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#drop the `Id` column \ntrain = train.drop('Id', axis=1)\ntrain.head(3)","metadata":{"papermill":{"duration":0.043419,"end_time":"2023-03-07T06:21:48.412206","exception":false,"start_time":"2023-03-07T06:21:48.368787","status":"completed"},"tags":[],"id":"0lItmbYS416n","execution":{"iopub.status.busy":"2024-10-29T18:58:06.812636Z","iopub.execute_input":"2024-10-29T18:58:06.813167Z","iopub.status.idle":"2024-10-29T18:58:06.847280Z","shell.execute_reply.started":"2024-10-29T18:58:06.813112Z","shell.execute_reply":"2024-10-29T18:58:06.845871Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0          60       RL         65.0     8450   Pave   NaN      Reg   \n1          20       RL         80.0     9600   Pave   NaN      Reg   \n2          60       RL         68.0    11250   Pave   NaN      IR1   \n\n  LandContour Utilities LotConfig  ... PoolArea PoolQC Fence MiscFeature  \\\n0         Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n1         Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n2         Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n\n  MiscVal MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n0       0      2    2008        WD         Normal     208500  \n1       0      5    2007        WD         Normal     181500  \n2       0      9    2008        WD         Normal     223500  \n\n[3 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows Ã— 80 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#dist of house prices\nprint(train['SalePrice'].describe())","metadata":{"papermill":{"duration":0.497946,"end_time":"2023-03-07T06:21:49.018361","exception":false,"start_time":"2023-03-07T06:21:48.520415","status":"completed"},"tags":[],"id":"qROZWZyE416o","execution":{"iopub.status.busy":"2024-10-29T18:58:06.848733Z","iopub.execute_input":"2024-10-29T18:58:06.849392Z","iopub.status.idle":"2024-10-29T18:58:06.866405Z","shell.execute_reply.started":"2024-10-29T18:58:06.849332Z","shell.execute_reply":"2024-10-29T18:58:06.863235Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"count      1460.000000\nmean     180921.195890\nstd       79442.502883\nmin       34900.000000\n25%      129975.000000\n50%      163000.000000\n75%      214000.000000\nmax      755000.000000\nName: SalePrice, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"label = 'SalePrice'\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train, label=label, task = tfdf.keras.Task.REGRESSION)","metadata":{"id":"xQgimfirSGQ9","papermill":{"duration":0.26438,"end_time":"2023-03-07T06:21:57.596711","exception":false,"start_time":"2023-03-07T06:21:57.332331","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:06.868744Z","iopub.execute_input":"2024-10-29T18:58:06.869642Z","iopub.status.idle":"2024-10-29T18:58:07.074111Z","shell.execute_reply.started":"2024-10-29T18:58:06.869578Z","shell.execute_reply":"2024-10-29T18:58:07.072686Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"tfdf.keras.get_all_models()","metadata":{"id":"MFmnkRR_Ui9w","papermill":{"duration":0.024872,"end_time":"2023-03-07T06:21:57.685403","exception":false,"start_time":"2023-03-07T06:21:57.660531","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:07.075797Z","iopub.execute_input":"2024-10-29T18:58:07.076151Z","iopub.status.idle":"2024-10-29T18:58:07.084111Z","shell.execute_reply.started":"2024-10-29T18:58:07.076115Z","shell.execute_reply":"2024-10-29T18:58:07.082865Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"[tensorflow_decision_forests.keras.RandomForestModel,\n tensorflow_decision_forests.keras.GradientBoostedTreesModel,\n tensorflow_decision_forests.keras.CartModel,\n tensorflow_decision_forests.keras.DistributedGradientBoostedTreesModel]"},"metadata":{}}]},{"cell_type":"markdown","source":"\n","metadata":{"id":"irxAS91IRVAX","papermill":{"duration":0.012674,"end_time":"2023-03-07T06:21:57.73704","exception":false,"start_time":"2023-03-07T06:21:57.724366","status":"completed"},"tags":[]}},{"cell_type":"code","source":"rf = tfdf.keras.RandomForestModel(task = tfdf.keras.Task.REGRESSION)","metadata":{"id":"O7bqOQMYTRXZ","papermill":{"duration":0.079382,"end_time":"2023-03-07T06:21:57.854964","exception":false,"start_time":"2023-03-07T06:21:57.775582","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:07.085515Z","iopub.execute_input":"2024-10-29T18:58:07.085901Z","iopub.status.idle":"2024-10-29T18:58:07.127464Z","shell.execute_reply.started":"2024-10-29T18:58:07.085849Z","shell.execute_reply":"2024-10-29T18:58:07.125782Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Use /tmp/tmpgswmd21g as temporary training directory\n","output_type":"stream"}]},{"cell_type":"code","source":"gbtm = tfdf.keras.GradientBoostedTreesModel(task = tfdf.keras.Task.REGRESSION)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T18:58:07.129438Z","iopub.execute_input":"2024-10-29T18:58:07.129828Z","iopub.status.idle":"2024-10-29T18:58:07.147446Z","shell.execute_reply.started":"2024-10-29T18:58:07.129787Z","shell.execute_reply":"2024-10-29T18:58:07.145868Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Use /tmp/tmpk6oj89ce as temporary training directory\n","output_type":"stream"}]},{"cell_type":"code","source":"rf.fit(x=train_ds)","metadata":{"id":"Ax6RircN92LW","papermill":{"duration":14.312048,"end_time":"2023-03-07T06:22:12.207321","exception":false,"start_time":"2023-03-07T06:21:57.895273","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-10-29T18:58:07.149499Z","iopub.execute_input":"2024-10-29T18:58:07.150119Z","iopub.status.idle":"2024-10-29T18:58:23.693951Z","shell.execute_reply.started":"2024-10-29T18:58:07.150058Z","shell.execute_reply":"2024-10-29T18:58:23.692571Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Reading training dataset...\nTraining dataset read in 0:00:08.805346. Found 1460 examples.\nTraining model...\n","output_type":"stream"},{"name":"stderr","text":"[INFO 2024-10-29T18:58:18.82014947+00:00 kernel.cc:1214] Loading model from path /tmp/tmpgswmd21g/model/ with prefix ccd38ca073214ee6\n","output_type":"stream"},{"name":"stdout","text":"Model trained in 0:00:03.292885\nCompiling model...\n","output_type":"stream"},{"name":"stderr","text":"[INFO 2024-10-29T18:58:19.429822144+00:00 decision_forest.cc:661] Model loaded with 300 root(s), 138340 node(s), and 75 input feature(s).\n[INFO 2024-10-29T18:58:19.429910881+00:00 abstract_model.cc:1311] Engine \"RandomForestOptPred\" built\n[INFO 2024-10-29T18:58:19.429964555+00:00 kernel.cc:1046] Use fast generic engine\n","output_type":"stream"},{"name":"stdout","text":"WARNING: AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7942aaec58c0> and will run it as-is.\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\nCause: could not get source code\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\nModel compiled.\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<keras.callbacks.History at 0x7942fd7d3a10>"},"metadata":{}}]},{"cell_type":"code","source":"gbtm.fit(x=train_ds)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T18:58:23.695781Z","iopub.execute_input":"2024-10-29T18:58:23.696319Z","iopub.status.idle":"2024-10-29T18:58:30.186831Z","shell.execute_reply.started":"2024-10-29T18:58:23.696241Z","shell.execute_reply":"2024-10-29T18:58:30.185250Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Reading training dataset...\nTraining dataset read in 0:00:01.204573. Found 1460 examples.\nTraining model...\nModel trained in 0:00:04.163426\nCompiling model...\n","output_type":"stream"},{"name":"stderr","text":"[INFO 2024-10-29T18:58:29.054212512+00:00 kernel.cc:1214] Loading model from path /tmp/tmpk6oj89ce/model/ with prefix 4f188e3703794876\n[INFO 2024-10-29T18:58:29.080010073+00:00 kernel.cc:1046] Use fast generic engine\n","output_type":"stream"},{"name":"stdout","text":"Model compiled.\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"<keras.callbacks.History at 0x7942a45bacd0>"},"metadata":{}}]},{"cell_type":"code","source":"#ATTEMPT AT STACKING- not going well lol so just averaging at the end\n#prediction1 = rf.predict(train_ds)\n#prediction2 = gbtm.predict(train_ds)\n#stacked_features = np.column_stack((prediction1, prediction2))\n#stacked_labels = train['SalePrice'].values\n\n# Meta-model training\n#meta_model = tfdf.keras.RandomForestModel(task=tfdf.keras.Task.REGRESSION)\n#meta_model.fit(stacked_features, stacked_labels)","metadata":{"execution":{"iopub.status.busy":"2024-10-29T18:58:30.193317Z","iopub.execute_input":"2024-10-29T18:58:30.193876Z","iopub.status.idle":"2024-10-29T18:58:30.200706Z","shell.execute_reply.started":"2024-10-29T18:58:30.193818Z","shell.execute_reply":"2024-10-29T18:58:30.199097Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"# predict on the competition test data using the models","metadata":{"papermill":{"duration":0.016075,"end_time":"2023-03-07T06:22:14.482026","exception":false,"start_time":"2023-03-07T06:22:14.465951","status":"completed"},"tags":[],"id":"jM9uB_7T416r"}},{"cell_type":"code","source":"test_file_path = \"../input/house-prices-advanced-regression-techniques/test.csv\"\ntest_data = pd.read_csv(test_file_path)\nids = test_data.pop('Id')\n\ntest_ds = tfdf.keras.pd_dataframe_to_tf_dataset(\n    test_data,\n    task = tfdf.keras.Task.REGRESSION)","metadata":{"papermill":{"duration":1.717453,"end_time":"2023-03-07T06:22:16.215717","exception":false,"start_time":"2023-03-07T06:22:14.498264","status":"completed"},"tags":[],"id":"gLySv9yJ416s","execution":{"iopub.status.busy":"2024-10-29T18:58:30.202185Z","iopub.execute_input":"2024-10-29T18:58:30.202664Z","iopub.status.idle":"2024-10-29T18:58:30.382861Z","shell.execute_reply.started":"2024-10-29T18:58:30.202620Z","shell.execute_reply":"2024-10-29T18:58:30.381695Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"preds1 = rf.predict(test_ds)\npreds2 = gbtm.predict(test_ds)\noutput = pd.DataFrame({'Id': ids,\n                       'SalePrice': ((preds1+preds2)/2).squeeze()})\n\noutput.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-29T18:58:30.384531Z","iopub.execute_input":"2024-10-29T18:58:30.385051Z","iopub.status.idle":"2024-10-29T18:58:32.509823Z","shell.execute_reply.started":"2024-10-29T18:58:30.384993Z","shell.execute_reply":"2024-10-29T18:58:32.508563Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"2/2 [==============================] - 1s 27ms/step\n2/2 [==============================] - 1s 19ms/step\n","output_type":"stream"},{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"     Id      SalePrice\n0  1461  125809.859375\n1  1462  154047.328125\n2  1463  185799.125000\n3  1464  186430.437500\n4  1465  194716.531250","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>125809.859375</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>154047.328125</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>185799.125000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>186430.437500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>194716.531250</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"output.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"papermill":{"duration":0.839277,"end_time":"2023-03-07T06:22:17.072045","exception":false,"start_time":"2023-03-07T06:22:16.232768","status":"completed"},"tags":[],"id":"0wALPJtE416s","execution":{"iopub.status.busy":"2024-10-29T18:58:32.511174Z","iopub.execute_input":"2024-10-29T18:58:32.511561Z","iopub.status.idle":"2024-10-29T18:58:32.527859Z","shell.execute_reply.started":"2024-10-29T18:58:32.511523Z","shell.execute_reply":"2024-10-29T18:58:32.526381Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"#preds3 = meta_model.predict(test_ds)\n#output = pd.DataFrame({'Id': ids,\n#                       'SalePrice': preds3.squeeze()})\n#output.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-29T18:58:32.529937Z","iopub.execute_input":"2024-10-29T18:58:32.530470Z","iopub.status.idle":"2024-10-29T18:58:32.536988Z","shell.execute_reply.started":"2024-10-29T18:58:32.530416Z","shell.execute_reply":"2024-10-29T18:58:32.535615Z"},"trusted":true},"execution_count":17,"outputs":[]}]}